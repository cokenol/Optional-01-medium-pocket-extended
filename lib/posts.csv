path,title,content,author,read,id,author_id
/inhuofficial,dApps / Web3 - Help me finally understand / ELI5!,"OK so I have read a few things about blockchain and dApps, I have listened to a few Twitter spaces and tried to educate myself on this.

But I am still not seeing the actual big picture, rather than a hype train and I want to understand it finally!

Crypto currencies make sense, NFTs kind of make sense (although the current ""NFT points at a URL to prove ownership"" model is flimsy at best) but dApps...they make no sense to me!

How do you get minimal latency lookups (like how does DNS work on such a complex network). 

Why is it beneficial to have a distributed network where you don't control when the core ""operating system"" software updates and may be running different versions on different nodes. 

How do you roll back a major mistake that exposes user data (for example) fast enough to avoid problems? And on the same track, if a node gets compromised in some way, who is responsible for the breach (my understanding is limited so this might be unlikely, I don't know!) 

How is it better when it will inevitably result in more jumps and hops to data nodes, which won't be as efficient as large data centres and therefore use more energy. 

Updating 10,000+ different data nodes rather than 6/7 CDNs seems like it is going to exponentially multiply data transmission data costs and energy costs.

All of these questions assume that ""Gas prices"" drop to next to nothing and it becomes commercially viable of course, which at the moment it certainly isn't.

Please, I may sound cynical, I am not really, I just don't see the Web3 benefits as clearly as everyone else apparently does!

Also if my terminology is crap, apologies, ask me if something doesn't make sense!",InHuOfficial,false,1,2
/miguelcoba,Deploying an Elixir Release using Docker on Render.com,"I'm going to show you how to deploy our Elixir Release to render.com. We'll use our  Docker image.

We only need to do a single change to our runtime.exs file. Add the url: line to the


I am creating a branch named render-deployment and committing all these changes to it:


Create an account in render.com and log in. We are going to create two services, one for the database and one for the Elixir Release. We must be sure that both services are created in the same region so that they share the same private network and can communicate and establish connections using their assigned network names. If we fail to do this, you'll see errors in the logs saying that the database domain name is non-existant (:nxdomain error). 

For this article, I'm going to put both in the Oregon, USA region. Be sure to use the same one.

Create a database service by clicking the New + button on the dashboard:



Select one name for this service (I'm using Saturn DB) and ensure the Oregon, USA region is selected. Leave the other fields to their defaults and select the Free plan. Then click the Create Database to provision this service.



In the next page you'll see the details of the database. We need to copy one value from here, the connection string that we'll use for the DATABASE_URL environment variable when we create the Elixir Release service.

Click the copy button on the Internal Connection String 



Let's create a Web Service with the New + button:



You'll need to connect your GitHub or GitLab account:



and select the repository you want to deploy:



Let's configure it. Set a name for your service (I'm using Saturn here). You'll see that the Dockerfile was detected and the Environment is preselected to Docker. Ensure you're using the Oregon, USA region, otherwise both services won't be able to connect each other. Select the branch you want to deploy (in my case is render-deployment) and select the Free plan.




We need to add a couple of environment variables. 



Create a DATABASE_URL and paste the value you copied from the Internal Connection String field in the Database service config page.

Then add another named SECRET_KEY_BASE. Run this command on the terminal and use the result as the value for it:




You can now create the Web Service. You'll see the status of the provisioning and when it is ready you'll see a green Live button and a line on the logs saying that the Endpoint is listening for requests:



If you click on the URL generated for your Web Service you'll see your Elixir Release app running on Render.com infrastructure:



This is something I couldn't do so far. The UI render provides has no way to connect to the running container. One way to run the migrations would be:

The  source code  for the saturn project is open source under the MIT license. Use the render-deployment branch.

I'm Miguel Cobá. Follow me on Twitter, subscribe to my newsletter, or read all my articles to learn more info about Elixir, Elm, Web Development, or writing eBooks.

Photo by Mueen Agherdien on Unsplash",Miguel Cobá,false,2,3
